import { useState } from 'react';
import { useGame } from '../context/GameContext';
import { Characteristic, ActionBlock, ActionType } from '../types';
import './CharacteristicsPage.css';

const actionTypeLabels: Record<ActionType, string> = {
  [ActionType.DAMAGE_ENEMY]: '–£—Ä–æ–Ω –≤—Ä–∞–≥—É',
  [ActionType.HEAL_ENEMY]: '–•–∏–ª –≤—Ä–∞–≥—É',
  [ActionType.DAMAGE_SELF]: '–£—Ä–æ–Ω —Å–µ–±–µ',
  [ActionType.HEAL_SELF]: '–•–∏–ª —Å–µ–±–µ',
  [ActionType.SPEND_MANA_SELF]: '–¢—Ä–∞—Ç–∞ –º–∞–Ω—ã (—Å–≤–æ—è)',
  [ActionType.SPEND_MANA_ENEMY]: '–¢—Ä–∞—Ç–∞ –º–∞–Ω—ã (–≤—Ä–∞–≥–∞)',
  [ActionType.RESTORE_MANA_ENEMY]: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã (–≤—Ä–∞–≥–∞)',
  [ActionType.RESTORE_MANA_SELF]: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–Ω—ã (—Å–≤–æ—è)',
  [ActionType.SPEND_STAMINA_SELF]: '–¢—Ä–∞—Ç–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ (—Å–≤–æ—è)',
  [ActionType.SPEND_STAMINA_ENEMY]: '–¢—Ä–∞—Ç–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ (–≤—Ä–∞–≥–∞)',
  [ActionType.RESTORE_STAMINA_SELF]: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ (—Å–≤–æ—è)',
  [ActionType.RESTORE_STAMINA_ENEMY]: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ (–≤—Ä–∞–≥–∞)',
  [ActionType.EFFECT_DURATION]: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (0 = –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)',
  [ActionType.COOLDOWN]: '–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ (–≤ —Ö–æ–¥–∞—Ö)',
  [ActionType.DISCARD_CARD]: '–°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—É',
  [ActionType.GLOBAL_MISS_CHANCE_SELF]: '–û–±—â–∏–π –®–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ —Å–≤–æ–π (%)',
  [ActionType.GLOBAL_MISS_CHANCE_ENEMY]: '–û–±—â–∏–π –®–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (%)',
  [ActionType.GLOBAL_CRIT_CHANCE_SELF]: '–û–±—â–∏–π –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ —Å–≤–æ–π (%)',
  [ActionType.GLOBAL_CRIT_CHANCE_ENEMY]: '–û–±—â–∏–π –®–∞–Ω—Å –∫—Ä–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (%)',
  [ActionType.GLOBAL_CRIT_SIZE_SELF]: '–û–±—â–∏–π –†–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∞ —Å–≤–æ–π (%)',
  [ActionType.GLOBAL_CRIT_SIZE_ENEMY]: '–û–±—â–∏–π –†–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (%)',
  [ActionType.CARD_CRIT_CHANCE]: '–®–∞–Ω—Å –∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç—ã (%)',
  [ActionType.CARD_CRIT_SIZE]: '–†–∞–∑–º–µ—Ä –∫—Ä–∏—Ç–∞ –∫–∞—Ä—Ç—ã (%)',
  [ActionType.CARD_MISS_CHANCE]: '–®–∞–Ω—Å –ø—Ä–æ–º–∞—Ö–∞ –∫–∞—Ä—Ç—ã (%)',
};

function CharacteristicsPage() {
  const { characteristics, addCharacteristic, updateCharacteristic, deleteCharacteristic } = useGame();
  const [showModal, setShowModal] = useState(false);
  const [editingChar, setEditingChar] = useState<Characteristic | null>(null);

  const [formData, setFormData] = useState({
    name: '',
    type: 'positive' as 'positive' | 'negative',
    powerPoints: 0,
    description: '',
    actions: [] as ActionBlock[],
  });

  const resetForm = () => {
    setFormData({
      name: '',
      type: 'positive',
      powerPoints: 0,
      description: '',
      actions: [],
    });
    setEditingChar(null);
  };

  const openModal = (char?: Characteristic) => {
    if (char) {
      setEditingChar(char);
      setFormData({
        name: char.name,
        type: char.type,
        powerPoints: char.powerPoints,
        description: char.description || '',
        actions: [...char.actions],
      });
    } else {
      resetForm();
    }
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setTimeout(resetForm, 300);
  };

  const addAction = () => {
    setFormData({
      ...formData,
      actions: [
        ...formData.actions,
        { id: Date.now().toString(), type: ActionType.DAMAGE_ENEMY, value: 0 },
      ],
    });
  };

  const updateAction = (index: number, field: 'type' | 'value', value: any) => {
    const newActions = [...formData.actions];
    newActions[index] = { ...newActions[index], [field]: value };
    setFormData({ ...formData, actions: newActions });
  };

  const removeAction = (index: number) => {
    setFormData({
      ...formData,
      actions: formData.actions.filter((_, i) => i !== index),
    });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
      return;
    }

    const characteristic: Characteristic = {
      id: editingChar?.id || Date.now().toString(),
      name: formData.name,
      type: formData.type,
      powerPoints: formData.powerPoints,
      description: formData.description,
      actions: formData.actions,
    };

    if (editingChar) {
      updateCharacteristic(editingChar.id, characteristic);
    } else {
      addCharacteristic(characteristic);
    }

    closeModal();
  };

  return (
    <div className="characteristics-page">
      <div className="page-header">
        <h1>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h1>
        <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç</p>
      </div>

      <div className="page-actions">
        <button className="btn-primary" onClick={() => openModal()}>
          + –î–æ–±–∞–≤–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        </button>
      </div>

      {characteristics.length === 0 ? (
        <div className="empty-state">
          <div className="empty-state-icon">üìä</div>
          <h3>–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
        </div>
      ) : (
        <div className="characteristics-list">
          {characteristics.map((char) => (
            <div key={char.id} className="list-item">
              <div className="list-item-header">
                <div>
                  <div className="list-item-title">
                    {char.name}
                    <span className={`badge badge-${char.type}`}>
                      {char.type === 'positive' ? '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è' : '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è'}
                    </span>
                  </div>
                  {char.description && (
                    <p className="char-description">{char.description}</p>
                  )}
                </div>
                <div className="list-item-actions">
                  <button className="btn-secondary btn-small" onClick={() => openModal(char)}>
                    –ò–∑–º–µ–Ω–∏—Ç—å
                  </button>
                  <button
                    className="btn-danger btn-small"
                    onClick={() => {
                      if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É?')) {
                        deleteCharacteristic(char.id);
                      }
                    }}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>

              <div className="char-stats">
                <div className="char-stat">
                  <span className="char-stat-label">–ü–æ–∏–Ω—Ç—ã –°–∏–ª—ã:</span>
                  <span className={`char-stat-value ${char.powerPoints >= 0 ? 'positive' : 'negative'}`}>
                    {char.powerPoints > 0 ? '+' : ''}{char.powerPoints}
                  </span>
                </div>
              </div>

              {char.actions.length > 0 && (
                <div className="char-actions">
                  <strong>–î–µ–π—Å—Ç–≤–∏—è:</strong>
                  <div className="actions-list">
                    {char.actions.map((action) => (
                      <div key={action.id} className="action-item">
                        {actionTypeLabels[action.type]}: <strong>{action.value}</strong>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}

      {showModal && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{editingChar ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É' : '–ù–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'}</h2>
              <button className="modal-close" onClick={closeModal}>√ó</button>
            </div>

            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ç–∞–∫–∞, –ó–¥–æ—Ä–æ–≤—å–µ, –ú–∞–Ω–∞"
                  required
                />
              </div>

              <div className="form-group">
                <label>–¢–∏–ø</label>
                <select
                  value={formData.type}
                  onChange={(e) => setFormData({ ...formData, type: e.target.value as 'positive' | 'negative' })}
                >
                  <option value="positive">–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è</option>
                  <option value="negative">–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è</option>
                </select>
              </div>

              <div className="form-group">
                <label>–ü–æ–∏–Ω—Ç—ã –°–∏–ª—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)</label>
                <input
                  type="number"
                  value={formData.powerPoints}
                  onChange={(e) => setFormData({ ...formData, powerPoints: parseFloat(e.target.value) })}
                  step="0.1"
                />
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
                  rows={2}
                />
              </div>

              <div className="form-group">
                <label>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π</label>
                <p className="help-text">–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</p>
                
                <div className="actions-constructor">
                  {formData.actions.map((action, index) => (
                    <div key={action.id} className="action-block">
                      <select
                        value={action.type}
                        onChange={(e) => updateAction(index, 'type', e.target.value)}
                      >
                        {Object.entries(actionTypeLabels).map(([key, label]) => (
                          <option key={key} value={key}>{label}</option>
                        ))}
                      </select>
                      <input
                        type="number"
                        value={action.value}
                        onChange={(e) => updateAction(index, 'value', parseFloat(e.target.value))}
                        placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                        step="0.1"
                      />
                      <button
                        type="button"
                        className="btn-danger btn-small"
                        onClick={() => removeAction(index)}
                      >
                        √ó
                      </button>
                    </div>
                  ))}
                  <button type="button" className="btn-secondary" onClick={addAction}>
                    + –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
                  </button>
                </div>
              </div>

              <div className="modal-footer">
                <button type="button" className="btn-secondary" onClick={closeModal}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn-primary">
                  {editingChar ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default CharacteristicsPage;
