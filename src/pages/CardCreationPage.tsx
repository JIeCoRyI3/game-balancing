import { useState } from 'react';
import { useGame } from '../context/GameContext';
import { Card, CardCharacteristic } from '../types';
import './CardCreationPage.css';

function CardCreationPage() {
  const { characteristics, cards, addCard, updateCard, deleteCard } = useGame();
  const [showModal, setShowModal] = useState(false);
  const [editingCard, setEditingCard] = useState<Card | null>(null);

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    characteristics: [] as CardCharacteristic[],
  });

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      characteristics: [],
    });
    setEditingCard(null);
  };

  const openModal = (card?: Card) => {
    if (card) {
      setEditingCard(card);
      setFormData({
        name: card.name,
        description: card.description,
        characteristics: [...card.characteristics],
      });
    } else {
      resetForm();
    }
    setShowModal(true);
  };

  const closeModal = () => {
    setShowModal(false);
    setTimeout(resetForm, 300);
  };

  const addCharacteristic = () => {
    if (characteristics.length === 0) {
      alert('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!');
      return;
    }
    setFormData({
      ...formData,
      characteristics: [
        ...formData.characteristics,
        { characteristicId: characteristics[0].id, value: 1 },
      ],
    });
  };

  const updateCharacteristic = (index: number, field: 'characteristicId' | 'value', value: any) => {
    const newChars = [...formData.characteristics];
    newChars[index] = { ...newChars[index], [field]: value };
    setFormData({ ...formData, characteristics: newChars });
  };

  const removeCharacteristic = (index: number) => {
    setFormData({
      ...formData,
      characteristics: formData.characteristics.filter((_, i) => i !== index),
    });
  };

  const calculateTotalPowerPoints = (): number => {
    return formData.characteristics.reduce((total, cardChar) => {
      const char = characteristics.find((c) => c.id === cardChar.characteristicId);
      if (!char) return total;
      return total + char.powerPoints * cardChar.value;
    }, 0);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã');
      return;
    }

    const totalPowerPoints = calculateTotalPowerPoints();

    const card: Card = {
      id: editingCard?.id || Date.now().toString(),
      name: formData.name,
      description: formData.description,
      characteristics: formData.characteristics,
      totalPowerPoints,
    };

    if (editingCard) {
      updateCard(editingCard.id, card);
    } else {
      addCard(card);
    }

    closeModal();
  };

  return (
    <div className="card-creation-page">
      <div className="page-header">
        <h1>–°–æ–∑–¥–∞–Ω–∏–µ –ö–∞—Ä—Ç</h1>
        <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–∞—Ä—Ç—ã, –∫–æ–º–±–∏–Ω–∏—Ä—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</p>
      </div>

      <div className="page-actions">
        <button className="btn-primary" onClick={() => openModal()}>
          + –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É
        </button>
      </div>

      {cards.length === 0 ? (
        <div className="empty-state">
          <div className="empty-state-icon">üÉè</div>
          <h3>–ù–µ—Ç –∫–∞—Ä—Ç</h3>
          <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏</p>
        </div>
      ) : (
        <div className="cards-grid">
          {cards.map((card) => (
            <div key={card.id} className="card-item">
              <div className="card-header">
                <h3>{card.name}</h3>
                <div className="card-power">
                  <span className={`power-value ${card.totalPowerPoints >= 0 ? 'positive' : 'negative'}`}>
                    {card.totalPowerPoints > 0 ? '+' : ''}{card.totalPowerPoints.toFixed(1)}
                  </span>
                  <span className="power-label">–ü–æ–∏–Ω—Ç—ã</span>
                </div>
              </div>

              {card.description && (
                <p className="card-description">{card.description}</p>
              )}

              <div className="card-characteristics">
                {card.characteristics.map((cardChar, idx) => {
                  const char = characteristics.find((c) => c.id === cardChar.characteristicId);
                  if (!char) return null;
                  return (
                    <div key={idx} className="card-char">
                      <span className={`char-badge ${char.type}`}>
                        {char.name}
                      </span>
                      <span className="char-value">√ó{cardChar.value}</span>
                      <span className="char-points">
                        ({char.powerPoints * cardChar.value > 0 ? '+' : ''}{(char.powerPoints * cardChar.value).toFixed(1)})
                      </span>
                    </div>
                  );
                })}
              </div>

              <div className="card-actions">
                <button className="btn-secondary btn-small" onClick={() => openModal(card)}>
                  –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button
                  className="btn-danger btn-small"
                  onClick={() => {
                    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É?')) {
                      deleteCard(card.id);
                    }
                  }}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {showModal && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal modal-large" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2>{editingCard ? '–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É' : '–ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞'}</h2>
              <button className="modal-close" onClick={closeModal}>√ó</button>
            </div>

            <form onSubmit={handleSubmit}>
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"
                  required
                />
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–∞—Ä—Ç—ã"
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</label>
                <div className="characteristics-builder">
                  {formData.characteristics.map((cardChar, index) => (
                    <div key={index} className="char-builder-item">
                      <select
                        value={cardChar.characteristicId}
                        onChange={(e) => updateCharacteristic(index, 'characteristicId', e.target.value)}
                      >
                        {characteristics.map((char) => (
                          <option key={char.id} value={char.id}>
                            {char.name} ({char.powerPoints > 0 ? '+' : ''}{char.powerPoints})
                          </option>
                        ))}
                      </select>
                      <input
                        type="number"
                        value={cardChar.value}
                        onChange={(e) => updateCharacteristic(index, 'value', parseFloat(e.target.value))}
                        placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                        min="0"
                        step="0.1"
                      />
                      <button
                        type="button"
                        className="btn-danger btn-small"
                        onClick={() => removeCharacteristic(index)}
                      >
                        √ó
                      </button>
                    </div>
                  ))}
                  <button
                    type="button"
                    className="btn-secondary"
                    onClick={addCharacteristic}
                    disabled={characteristics.length === 0}
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
                  </button>
                </div>
              </div>

              <div className="power-preview">
                <div className="power-preview-label">–û–±—â–∞—è —Å–∏–ª–∞ –∫–∞—Ä—Ç—ã:</div>
                <div className={`power-preview-value ${calculateTotalPowerPoints() >= 0 ? 'positive' : 'negative'}`}>
                  {calculateTotalPowerPoints() > 0 ? '+' : ''}{calculateTotalPowerPoints().toFixed(1)} –ü–æ–∏–Ω—Ç–æ–≤
                </div>
              </div>

              <div className="modal-footer">
                <button type="button" className="btn-secondary" onClick={closeModal}>
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button type="submit" className="btn-primary">
                  {editingCard ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default CardCreationPage;
